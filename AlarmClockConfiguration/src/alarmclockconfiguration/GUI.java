/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package alarmclockconfiguration;

import gnu.io.CommPortIdentifier; 
import gnu.io.PortInUseException;
import gnu.io.SerialPort;
import gnu.io.SerialPortEvent; 
import gnu.io.SerialPortEventListener; 
import gnu.io.UnsupportedCommOperationException;
import java.awt.event.ItemEvent;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader; 
import java.io.OutputStream; 
import java.io.PrintStream;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Enumeration;
import java.util.TooManyListenersException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.text.BadLocationException;

/**
 *
 * @author alex
 */
public class GUI extends javax.swing.JFrame implements SerialPortEventListener, Runnable {

    /**
     * Creates new form NewJFrame
     */
    public GUI() {
        initComponents();
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tempButtonGroup = new javax.swing.ButtonGroup();
        hourFormatButtonGroup = new javax.swing.ButtonGroup();
        serialTextField = new javax.swing.JTextField();
        serialSendButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        serialTextArea = new javax.swing.JTextArea();
        displayTypeComboBox = new javax.swing.JComboBox();
        displayLabel = new javax.swing.JLabel();
        fahrenheitRadioButton = new javax.swing.JRadioButton();
        celsiusRadioButton = new javax.swing.JRadioButton();
        hourFormat12RadioButton = new javax.swing.JRadioButton();
        hourFormat24RadioButton = new javax.swing.JRadioButton();
        brightnessSlider = new javax.swing.JSlider();
        brightnessLabel = new javax.swing.JLabel();
        programmingModeToggleButton = new javax.swing.JToggleButton();
        sundayAlarmLabel = new javax.swing.JLabel();
        sundayAlarmToggleButton = new javax.swing.JToggleButton();
        sundayAlarmTime = new javax.swing.JFormattedTextField(new SimpleDateFormat("HH:mm"));
        NumberFormat f = new DecimalFormat("000");
        f.setMaximumIntegerDigits(3);
        sundayAlarmSong = new javax.swing.JFormattedTextField(f);
        sundayTrackLabel1 = new javax.swing.JLabel();
        sundayTrackLabel2 = new javax.swing.JLabel();
        sundayAlarmUpdateButton = new javax.swing.JButton();
        playSundaySongButton = new javax.swing.JButton();
        playSongLabel1 = new javax.swing.JLabel();
        playSongNumber = new javax.swing.JFormattedTextField(f);
        playSongLabel2 = new javax.swing.JLabel();
        playSongButton = new javax.swing.JButton();
        playMondaySongButton = new javax.swing.JButton();
        mondayAlarmUpdateButton = new javax.swing.JButton();
        mondayTrackLabel2 = new javax.swing.JLabel();
        mondayAlarmSong = new javax.swing.JFormattedTextField(f);
        mondayTrackLabel1 = new javax.swing.JLabel();
        mondayAlarmTime = new javax.swing.JFormattedTextField(new SimpleDateFormat("HH:mm"));
        mondayAlarmToggleButton = new javax.swing.JToggleButton();
        mondayAlarmLabel = new javax.swing.JLabel();
        printTrackListButton = new javax.swing.JButton();
        playTuesdaySongButton = new javax.swing.JButton();
        tuesdayAlarmUpdateButton = new javax.swing.JButton();
        tuesdayAlarmSong = new javax.swing.JFormattedTextField(f);
        tuesdayTrackLabel2 = new javax.swing.JLabel();
        tuesdayTrackLabel1 = new javax.swing.JLabel();
        tuesdayAlarmTime = new javax.swing.JFormattedTextField(new SimpleDateFormat("HH:mm"));
        tuesdayAlarmToggleButton = new javax.swing.JToggleButton();
        tuesdayAlarmLabel = new javax.swing.JLabel();
        playWednesdaySongButton = new javax.swing.JButton();
        wednesdayAlarmUpdateButton = new javax.swing.JButton();
        wednesdayTrackLabel2 = new javax.swing.JLabel();
        wednesdayAlarmSong = new javax.swing.JFormattedTextField(f);
        wednesdayTrackLabel1 = new javax.swing.JLabel();
        wednesdayAlarmTime = new javax.swing.JFormattedTextField(new SimpleDateFormat("HH:mm"));
        wednesdayAlarmToggleButton = new javax.swing.JToggleButton();
        wednesdayAlarmLabel = new javax.swing.JLabel();
        playThursdaySongButton = new javax.swing.JButton();
        thursdayAlarmUpdateButton = new javax.swing.JButton();
        thursdayTrackLabel2 = new javax.swing.JLabel();
        thursdayAlarmSong = new javax.swing.JFormattedTextField(f);
        thursdayTrackLabel1 = new javax.swing.JLabel();
        thursdayAlarmTime = new javax.swing.JFormattedTextField(new SimpleDateFormat("HH:mm"));
        thursdayAlarmToggleButton = new javax.swing.JToggleButton();
        thursdayAlarmLabel = new javax.swing.JLabel();
        playFridaySongButton = new javax.swing.JButton();
        fridayAlarmUpdateButton = new javax.swing.JButton();
        fridayTrackLabel2 = new javax.swing.JLabel();
        fridayAlarmSong = new javax.swing.JFormattedTextField(f);
        fridayTrackLabel1 = new javax.swing.JLabel();
        fridayAlarmTime = new javax.swing.JFormattedTextField(new SimpleDateFormat("HH:mm"));
        fridayAlarmToggleButton = new javax.swing.JToggleButton();
        fridayAlarmLabel = new javax.swing.JLabel();
        saturdayAlarmLabel = new javax.swing.JLabel();
        saturdayAlarmToggleButton = new javax.swing.JToggleButton();
        saturdayAlarmTime = new javax.swing.JFormattedTextField(new SimpleDateFormat("HH:mm"));
        saturdayTrackLabel1 = new javax.swing.JLabel();
        saturdayAlarmSong = new javax.swing.JFormattedTextField(f);
        saturdayTrackLabel2 = new javax.swing.JLabel();
        saturdayAlarmUpdateButton = new javax.swing.JButton();
        playSaturdaySongButton = new javax.swing.JButton();
        synchronizeTimeButton = new javax.swing.JButton();
        printCurrentDataButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Alarm Clock Configuration");

        serialTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                serialTextFieldActionPerformed(evt);
            }
        });

        serialSendButton.setText("Send");
        serialSendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                serialSendButtonActionPerformed(evt);
            }
        });

        serialTextArea.setColumns(20);
        serialTextArea.setRows(5);
        jScrollPane1.setViewportView(serialTextArea);

        displayTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Temp", "Date", "None" }));
        displayTypeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayTypeComboBoxActionPerformed(evt);
            }
        });

        displayLabel.setText("Display Type:");

        tempButtonGroup.add(fahrenheitRadioButton);
        fahrenheitRadioButton.setText("Fahrenheit");
        fahrenheitRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fahrenheitRadioButtonActionPerformed(evt);
            }
        });

        tempButtonGroup.add(celsiusRadioButton);
        celsiusRadioButton.setText("Celsius");
        celsiusRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                celsiusRadioButtonActionPerformed(evt);
            }
        });

        hourFormatButtonGroup.add(hourFormat12RadioButton);
        hourFormat12RadioButton.setText("12-Hour Format");
        hourFormat12RadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hourFormat12RadioButtonActionPerformed(evt);
            }
        });

        hourFormatButtonGroup.add(hourFormat24RadioButton);
        hourFormat24RadioButton.setText("24-Hour Format");
        hourFormat24RadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hourFormat24RadioButtonActionPerformed(evt);
            }
        });

        brightnessSlider.setMajorTickSpacing(1);
        brightnessSlider.setMaximum(15);
        brightnessSlider.setPaintLabels(true);
        brightnessSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                brightnessSliderStateChanged(evt);
            }
        });

        brightnessLabel.setText("Brightness:");

        programmingModeToggleButton.setSelected(true);
        programmingModeToggleButton.setText("Programming Mode");
        programmingModeToggleButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                programmingModeToggleButtonItemStateChanged(evt);
            }
        });

        sundayAlarmLabel.setText("Sunday Alarm:");

        sundayAlarmToggleButton.setText("Enabled");
        sundayAlarmToggleButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                sundayAlarmToggleButtonItemStateChanged(evt);
            }
        });

        sundayAlarmTime.setText("00:00");
        sundayAlarmTime.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                sundayAlarmTimeKeyTyped(evt);
            }
        });

        sundayAlarmSong.setText("001");
        sundayAlarmSong.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                sundayAlarmSongKeyTyped(evt);
            }
        });

        sundayTrackLabel1.setText("track");

        sundayTrackLabel2.setText(".mp3");

        sundayAlarmUpdateButton.setText("Update");
        sundayAlarmUpdateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sundayAlarmUpdateButtonActionPerformed(evt);
            }
        });

        playSundaySongButton.setText("Play Song");
        playSundaySongButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playSundaySongButtonActionPerformed(evt);
            }
        });

        playSongLabel1.setText("Play Song: track");

        playSongNumber.setText("001");

        playSongLabel2.setText(".mp3");

        playSongButton.setText("Play");
        playSongButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playSongButtonActionPerformed(evt);
            }
        });

        playMondaySongButton.setText("Play Song");
        playMondaySongButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playMondaySongButtonActionPerformed(evt);
            }
        });

        mondayAlarmUpdateButton.setText("Update");
        mondayAlarmUpdateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mondayAlarmUpdateButtonActionPerformed(evt);
            }
        });

        mondayTrackLabel2.setText(".mp3");

        mondayAlarmSong.setText("001");
        mondayAlarmSong.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                mondayAlarmSongKeyTyped(evt);
            }
        });

        mondayTrackLabel1.setText("track");

        mondayAlarmTime.setText("00:00");
        mondayAlarmTime.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                mondayAlarmTimeKeyTyped(evt);
            }
        });

        mondayAlarmToggleButton.setText("Enabled");
        mondayAlarmToggleButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                mondayAlarmToggleButtonItemStateChanged(evt);
            }
        });

        mondayAlarmLabel.setText("Monday Alarm:");

        printTrackListButton.setText("Get List of Songs");
        printTrackListButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printTrackListButtonActionPerformed(evt);
            }
        });

        playTuesdaySongButton.setText("Play Song");
        playTuesdaySongButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playTuesdaySongButtonActionPerformed(evt);
            }
        });

        tuesdayAlarmUpdateButton.setText("Update");
        tuesdayAlarmUpdateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tuesdayAlarmUpdateButtonActionPerformed(evt);
            }
        });

        tuesdayAlarmSong.setText("001");
        tuesdayAlarmSong.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tuesdayAlarmSongKeyTyped(evt);
            }
        });

        tuesdayTrackLabel2.setText(".mp3");

        tuesdayTrackLabel1.setText("track");

        tuesdayAlarmTime.setText("00:00");
        tuesdayAlarmTime.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tuesdayAlarmTimeKeyTyped(evt);
            }
        });

        tuesdayAlarmToggleButton.setText("Enabled");
        tuesdayAlarmToggleButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                tuesdayAlarmToggleButtonItemStateChanged(evt);
            }
        });

        tuesdayAlarmLabel.setText("Tuesday Alarm:");

        playWednesdaySongButton.setText("Play Song");
        playWednesdaySongButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playWednesdaySongButtonActionPerformed(evt);
            }
        });

        wednesdayAlarmUpdateButton.setText("Update");
        wednesdayAlarmUpdateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wednesdayAlarmUpdateButtonActionPerformed(evt);
            }
        });

        wednesdayTrackLabel2.setText(".mp3");

        wednesdayAlarmSong.setText("001");
        wednesdayAlarmSong.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                wednesdayAlarmSongKeyTyped(evt);
            }
        });

        wednesdayTrackLabel1.setText("track");

        wednesdayAlarmTime.setText("00:00");
        wednesdayAlarmTime.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                wednesdayAlarmTimeKeyTyped(evt);
            }
        });

        wednesdayAlarmToggleButton.setText("Enabled");
        wednesdayAlarmToggleButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                wednesdayAlarmToggleButtonItemStateChanged(evt);
            }
        });

        wednesdayAlarmLabel.setText("Wednesday Alarm:");

        playThursdaySongButton.setText("Play Song");
        playThursdaySongButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playThursdaySongButtonActionPerformed(evt);
            }
        });

        thursdayAlarmUpdateButton.setText("Update");
        thursdayAlarmUpdateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                thursdayAlarmUpdateButtonActionPerformed(evt);
            }
        });

        thursdayTrackLabel2.setText(".mp3");

        thursdayAlarmSong.setText("001");
        thursdayAlarmSong.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                thursdayAlarmSongKeyTyped(evt);
            }
        });

        thursdayTrackLabel1.setText("track");

        thursdayAlarmTime.setText("00:00");
        thursdayAlarmTime.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                thursdayAlarmTimeKeyTyped(evt);
            }
        });

        thursdayAlarmToggleButton.setText("Enabled");
        thursdayAlarmToggleButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                thursdayAlarmToggleButtonItemStateChanged(evt);
            }
        });

        thursdayAlarmLabel.setText("Thursday Alarm:");

        playFridaySongButton.setText("Play Song");
        playFridaySongButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playFridaySongButtonActionPerformed(evt);
            }
        });

        fridayAlarmUpdateButton.setText("Update");
        fridayAlarmUpdateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fridayAlarmUpdateButtonActionPerformed(evt);
            }
        });

        fridayTrackLabel2.setText(".mp3");

        fridayAlarmSong.setText("001");
        fridayAlarmSong.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                fridayAlarmSongKeyTyped(evt);
            }
        });

        fridayTrackLabel1.setText("track");

        fridayAlarmTime.setText("00:00");
        fridayAlarmTime.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                fridayAlarmTimeKeyTyped(evt);
            }
        });

        fridayAlarmToggleButton.setText("Enabled");
        fridayAlarmToggleButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                fridayAlarmToggleButtonItemStateChanged(evt);
            }
        });

        fridayAlarmLabel.setText("Friday Alarm:");

        saturdayAlarmLabel.setText("Saturday Alarm:");

        saturdayAlarmToggleButton.setText("Enabled");
        saturdayAlarmToggleButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                saturdayAlarmToggleButtonItemStateChanged(evt);
            }
        });

        saturdayAlarmTime.setText("00:00");
        saturdayAlarmTime.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                saturdayAlarmTimeKeyTyped(evt);
            }
        });

        saturdayTrackLabel1.setText("track");

        saturdayAlarmSong.setText("001");
        saturdayAlarmSong.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                saturdayAlarmSongKeyTyped(evt);
            }
        });

        saturdayTrackLabel2.setText(".mp3");

        saturdayAlarmUpdateButton.setText("Update");
        saturdayAlarmUpdateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saturdayAlarmUpdateButtonActionPerformed(evt);
            }
        });

        playSaturdaySongButton.setText("Play Song");
        playSaturdaySongButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playSaturdaySongButtonActionPerformed(evt);
            }
        });

        synchronizeTimeButton.setText("Synchronize Time");
        synchronizeTimeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                synchronizeTimeButtonActionPerformed(evt);
            }
        });

        printCurrentDataButton.setText("Get Current Data");
        printCurrentDataButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printCurrentDataButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(programmingModeToggleButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(displayLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(displayTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fahrenheitRadioButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(celsiusRadioButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(hourFormat12RadioButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(hourFormat24RadioButton)
                        .addGap(44, 44, 44))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(serialTextField)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(serialSendButton))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(brightnessLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(brightnessSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 331, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(playSongLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(playSongNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(playSongLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(playSongButton))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(mondayAlarmLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(mondayAlarmToggleButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(mondayAlarmTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(mondayTrackLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(mondayAlarmSong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(mondayTrackLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(mondayAlarmUpdateButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(playMondaySongButton))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(tuesdayAlarmLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(tuesdayAlarmToggleButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(tuesdayAlarmTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(tuesdayTrackLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(tuesdayAlarmSong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(tuesdayTrackLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(tuesdayAlarmUpdateButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(playTuesdaySongButton))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(wednesdayAlarmLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(wednesdayAlarmToggleButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(wednesdayAlarmTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(wednesdayTrackLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(wednesdayAlarmSong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(wednesdayTrackLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(wednesdayAlarmUpdateButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(playWednesdaySongButton))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(thursdayAlarmLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(thursdayAlarmToggleButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(thursdayAlarmTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(thursdayTrackLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(thursdayAlarmSong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(thursdayTrackLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(thursdayAlarmUpdateButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(playThursdaySongButton))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(fridayAlarmLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(fridayAlarmToggleButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(fridayAlarmTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(fridayTrackLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(fridayAlarmSong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(fridayTrackLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(fridayAlarmUpdateButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(playFridaySongButton))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(saturdayAlarmLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(saturdayAlarmToggleButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(saturdayAlarmTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(saturdayTrackLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(saturdayAlarmSong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(saturdayTrackLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(saturdayAlarmUpdateButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(playSaturdaySongButton))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(printTrackListButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(synchronizeTimeButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(printCurrentDataButton))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(sundayAlarmLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(sundayAlarmToggleButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(sundayAlarmTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(sundayTrackLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(sundayAlarmSong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(sundayTrackLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(sundayAlarmUpdateButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(playSundaySongButton)))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(programmingModeToggleButton)
                    .addComponent(displayTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(displayLabel)
                    .addComponent(fahrenheitRadioButton)
                    .addComponent(celsiusRadioButton)
                    .addComponent(hourFormat12RadioButton)
                    .addComponent(hourFormat24RadioButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(brightnessSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(brightnessLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(printTrackListButton)
                            .addComponent(synchronizeTimeButton)
                            .addComponent(printCurrentDataButton)))
                    .addComponent(playSongButton)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(playSongLabel1)
                        .addComponent(playSongNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(playSongLabel2)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sundayAlarmUpdateButton)
                    .addComponent(playSundaySongButton)
                    .addComponent(sundayAlarmLabel)
                    .addComponent(sundayAlarmToggleButton)
                    .addComponent(sundayAlarmTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sundayTrackLabel1)
                    .addComponent(sundayAlarmSong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sundayTrackLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mondayAlarmUpdateButton)
                    .addComponent(playMondaySongButton)
                    .addComponent(mondayAlarmLabel)
                    .addComponent(mondayAlarmToggleButton)
                    .addComponent(mondayAlarmTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mondayTrackLabel1)
                    .addComponent(mondayAlarmSong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mondayTrackLabel2))
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tuesdayAlarmUpdateButton)
                    .addComponent(playTuesdaySongButton)
                    .addComponent(tuesdayAlarmLabel)
                    .addComponent(tuesdayAlarmToggleButton)
                    .addComponent(tuesdayAlarmTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tuesdayTrackLabel1)
                    .addComponent(tuesdayAlarmSong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tuesdayTrackLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(wednesdayAlarmUpdateButton)
                    .addComponent(playWednesdaySongButton)
                    .addComponent(wednesdayAlarmLabel)
                    .addComponent(wednesdayAlarmToggleButton)
                    .addComponent(wednesdayAlarmTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(wednesdayTrackLabel1)
                    .addComponent(wednesdayAlarmSong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(wednesdayTrackLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(thursdayAlarmUpdateButton)
                    .addComponent(playThursdaySongButton)
                    .addComponent(thursdayAlarmLabel)
                    .addComponent(thursdayAlarmToggleButton)
                    .addComponent(thursdayAlarmTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(thursdayTrackLabel1)
                    .addComponent(thursdayAlarmSong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(thursdayTrackLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fridayAlarmUpdateButton)
                    .addComponent(playFridaySongButton)
                    .addComponent(fridayAlarmLabel)
                    .addComponent(fridayAlarmToggleButton)
                    .addComponent(fridayAlarmTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fridayTrackLabel1)
                    .addComponent(fridayAlarmSong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fridayTrackLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saturdayAlarmUpdateButton)
                    .addComponent(playSaturdaySongButton)
                    .addComponent(saturdayAlarmLabel)
                    .addComponent(saturdayAlarmToggleButton)
                    .addComponent(saturdayAlarmTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(saturdayTrackLabel1)
                    .addComponent(saturdayAlarmSong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(saturdayTrackLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(serialTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(serialSendButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * When the serialSendButton is pressed, the text in the jTextField is sent over serial.
     * The jTextField is cleared and regains focus.
     * @param evt The ActionEvent
     */
    private void serialSendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_serialSendButtonActionPerformed
        printStream.println(serialTextField.getText());
        serialTextField.setText("");
        serialTextField.requestFocus();
    }//GEN-LAST:event_serialSendButtonActionPerformed

    /**
     * When the enter key is pressed, the text in the jTextField is sent over serial.
     * The jTextField is cleared and regains focus.
     * @param evt The ActionEvent
     */
    private void serialTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_serialTextFieldActionPerformed
        printStream.println(serialTextField.getText());
        serialTextField.setText("");
        serialTextField.requestFocus();
    }//GEN-LAST:event_serialTextFieldActionPerformed

    /**
     * When the item in the displayTypeComboBox is changed, the change is sent over serial.
     * @param evt The ActionEvent
     */
    private void displayTypeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayTypeComboBoxActionPerformed
        if (!loadingSettings) printStream.println("SET DISPLAY " + displayTypeComboBox.getSelectedItem().toString().toUpperCase());
        
    }//GEN-LAST:event_displayTypeComboBoxActionPerformed

    /**
     * When the fahrenheitRadioButton is pressed, the change is sent over serial.
     * @param evt The ActionEvent
     */
    private void fahrenheitRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fahrenheitRadioButtonActionPerformed
        if (!loadingSettings) printStream.println("SET TEMP FAHRENHEIT");
    }//GEN-LAST:event_fahrenheitRadioButtonActionPerformed

    /**
     * When the celsiusRadioButton is pressed, the change is sent over serial.
     * @param evt The ActionEvent
     */
    private void celsiusRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_celsiusRadioButtonActionPerformed
        if (!loadingSettings) printStream.println("SET TEMP CELSIUS");
    }//GEN-LAST:event_celsiusRadioButtonActionPerformed

    /**
     * When the hourFormat12RadioButton is pressed, the change is sent over serial.
     * @param evt The ActionEvent
     */
    private void hourFormat12RadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hourFormat12RadioButtonActionPerformed
        if (!loadingSettings) printStream.println("SET CLOCK 12-HOUR");
    }//GEN-LAST:event_hourFormat12RadioButtonActionPerformed

    /**
     * When the hourFormat24RadioButton is pressed, the change is sent over serial.
     * @param evt The ActionEvent
     */
    private void hourFormat24RadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hourFormat24RadioButtonActionPerformed
        if (!loadingSettings) printStream.println("SET CLOCK 24-HOUR");
    }//GEN-LAST:event_hourFormat24RadioButtonActionPerformed

    /**
     * When the brightnessSlider is moved, the change is sent over serial.
     * @param evt The ActionEvent
     */
    private void brightnessSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_brightnessSliderStateChanged
        if (!loadingSettings && !brightnessSlider.getValueIsAdjusting()) printStream.println("SET BRIGHTNESS " + brightnessSlider.getValue());
    }//GEN-LAST:event_brightnessSliderStateChanged

    /**
     * When the programmingModeToggleButton is pressed, the change is sent over serial,
     * and the GUI is updated to reflect the change.
     * @param evt The ActionEvent
     */
    private void programmingModeToggleButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_programmingModeToggleButtonItemStateChanged
        if (!loadingSettings) {
            if (evt.getStateChange()==ItemEvent.DESELECTED) {
                printStream.println("EXIT");
                toggleAllComponents(false);
            } else if (evt.getStateChange()==ItemEvent.SELECTED) {
                loadSettings();
            }
        }
    }//GEN-LAST:event_programmingModeToggleButtonItemStateChanged

    /**
     * When the sundayAlarmToggleButton is pressed, Sunday's alarm is either enabled or disabled.
     * @param evt The ActionEvent
     */
    private void sundayAlarmToggleButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_sundayAlarmToggleButtonItemStateChanged
        if (!loadingSettings) {
            if (evt.getStateChange()==ItemEvent.DESELECTED) {
                printStream.println("TURN SUNDAY ALARM OFF");
            } else if (evt.getStateChange()==ItemEvent.SELECTED) {
                printStream.println("TURN SUNDAY ALARM ON");
            }
        }
    }//GEN-LAST:event_sundayAlarmToggleButtonItemStateChanged

    /**
     * When the sundayAlarmUpdateButton is pressed, the changes in the jTextFields are sent over serial.
     * The button is disabled upon pressing it to prevent the method from running when no changes were made.
     * @param evt The ActionEvent
     */
    private void sundayAlarmUpdateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sundayAlarmUpdateButtonActionPerformed
        if (!loadingSettings) {
            printStream.println("SET SUNDAY ALARM " + sundayAlarmTime.getText());
            printStream.println("SET SUNDAY SONG " + sundayAlarmSong.getText());
            sundayAlarmUpdateButton.setEnabled(false);
        }
    }//GEN-LAST:event_sundayAlarmUpdateButtonActionPerformed

    /**
     * When the playSundaySongButton is pressed, Sunday's alarm song is played.
     * The button's text switches between "Play Song" and "Stop Song" appropriately.
     * @param evt The ActionEvent
     */
    private void playSundaySongButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playSundaySongButtonActionPerformed
        if (!loadingSettings) {
            if (playSundaySongButton.getText().equals("Play Song")) {
                printStream.println("PLAY SUNDAY SONG");
                playSundaySongButton.setText("Stop Song");
            } else {
                printStream.println("STOP SONG");
                playSundaySongButton.setText("Play Song");
            }
        }
    }//GEN-LAST:event_playSundaySongButtonActionPerformed

    /**
     * When the playSongButton is pressed, the song name in the jFormattedTextField is played.
     * The button's text switches between "Play" and "Stop" appropriately.
     * @param evt The ActionEvent
     */
    private void playSongButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playSongButtonActionPerformed
        if (!loadingSettings) {
            if (playSongButton.getText().equals("Play")) {
                printStream.println("PLAY SONG track"  + playSongNumber.getText() + ".mp3");
                playSongButton.setText("Stop");
            } else {
                printStream.println("STOP SONG");
                playSongButton.setText("Play");
            }
        }
    }//GEN-LAST:event_playSongButtonActionPerformed

    /**
     * When the user types into the sundayAlarmTime jFormattedTextField, the sundayAlarmUpdateButton is
     * enabled to allow changes to be saved.
     * @param evt The ActionEvent
     */
    private void sundayAlarmTimeKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_sundayAlarmTimeKeyTyped
        sundayAlarmUpdateButton.setEnabled(true);
    }//GEN-LAST:event_sundayAlarmTimeKeyTyped

    /**
     * When the user types into the sundayAlarmSong jFormattedTextField, the sundayAlarmUpdateButton is
     * enabled to allow changes to be saved.
     * @param evt The ActionEvent
     */
    private void sundayAlarmSongKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_sundayAlarmSongKeyTyped
        sundayAlarmUpdateButton.setEnabled(true);
    }//GEN-LAST:event_sundayAlarmSongKeyTyped

    /**
     * When the playMondaySongButton is pressed, Monday's alarm song is played.
     * The button's text switches between "Play Song" and "Stop Song" appropriately.
     * @param evt The ActionEvent
     */
    private void playMondaySongButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playMondaySongButtonActionPerformed
        if (!loadingSettings) {
            if (playMondaySongButton.getText().equals("Play Song")) {
                printStream.println("PLAY MONDAY SONG");
                playMondaySongButton.setText("Stop Song");
            } else {
                printStream.println("STOP SONG");
                playMondaySongButton.setText("Play Song");
            }
        }
    }//GEN-LAST:event_playMondaySongButtonActionPerformed

    /**
     * When the mondayAlarmUpdateButton is pressed, the changes in the jTextFields are sent over serial.
     * The button is disabled upon pressing it to prevent the method from running when no changes were made.
     * @param evt The ActionEvent
     */
    private void mondayAlarmUpdateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mondayAlarmUpdateButtonActionPerformed
        if (!loadingSettings) {
            printStream.println("SET MONDAY ALARM " + mondayAlarmTime.getText());
            printStream.println("SET MONDAY SONG " + mondayAlarmSong.getText());
            mondayAlarmUpdateButton.setEnabled(false);
        }
    }//GEN-LAST:event_mondayAlarmUpdateButtonActionPerformed

    /**
     * When the user types into the mondayAlarmSong jFormattedTextField, the mondayAlarmUpdateButton is
     * enabled to allow changes to be saved.
     * @param evt The ActionEvent
     */
    private void mondayAlarmSongKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_mondayAlarmSongKeyTyped
        mondayAlarmUpdateButton.setEnabled(true);
    }//GEN-LAST:event_mondayAlarmSongKeyTyped

    /**
     * When the user types into the mondayAlarmTime jFormattedTextField, the mondayAlarmUpdateButton is
     * enabled to allow changes to be saved.
     * @param evt The ActionEvent
     */
    private void mondayAlarmTimeKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_mondayAlarmTimeKeyTyped
        mondayAlarmUpdateButton.setEnabled(true);
    }//GEN-LAST:event_mondayAlarmTimeKeyTyped

    /**
     * When the mondayAlarmToggleButton is pressed, Monday's alarm is either enabled or disabled.
     * @param evt The ActionEvent
     */
    private void mondayAlarmToggleButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_mondayAlarmToggleButtonItemStateChanged
        if (!loadingSettings) {
            if (evt.getStateChange()==ItemEvent.DESELECTED) {
                printStream.println("TURN MONDAY ALARM OFF");
            } else if (evt.getStateChange()==ItemEvent.SELECTED) {
                printStream.println("TURN MONDAY ALARM ON");
            }
        }
    }//GEN-LAST:event_mondayAlarmToggleButtonItemStateChanged

    /**
     * When the printTrackListButton is pressed, a request to list all songs is sent over serial.
     * @param evt The ActionEvent
     */
    private void printTrackListButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printTrackListButtonActionPerformed
        printStream.println("PRINT TRACK LIST");
    }//GEN-LAST:event_printTrackListButtonActionPerformed

    /**
     * When the playTuesdaySongButton is pressed, Tuesday's alarm song is played.
     * The button's text switches between "Play Song" and "Stop Song" appropriately.
     * @param evt The ActionEvent
     */
    private void playTuesdaySongButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playTuesdaySongButtonActionPerformed
        if (!loadingSettings) {
            if (playTuesdaySongButton.getText().equals("Play Song")) {
                printStream.println("PLAY TUESDAY SONG");
                playTuesdaySongButton.setText("Stop Song");
            } else {
                printStream.println("STOP SONG");
                playTuesdaySongButton.setText("Play Song");
            }
        }
    }//GEN-LAST:event_playTuesdaySongButtonActionPerformed

    /**
     * When the tuesdayAlarmUpdateButton is pressed, the changes in the jTextFields are sent over serial.
     * The button is disabled upon pressing it to prevent the method from running when no changes were made.
     * @param evt The ActionEvent
     */
    private void tuesdayAlarmUpdateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tuesdayAlarmUpdateButtonActionPerformed
        if (!loadingSettings) {
            printStream.println("SET TUESDAY ALARM " + tuesdayAlarmTime.getText());
            printStream.println("SET TUESDAY SONG " + tuesdayAlarmSong.getText());
            tuesdayAlarmUpdateButton.setEnabled(false);
        }
    }//GEN-LAST:event_tuesdayAlarmUpdateButtonActionPerformed

    /**
     * When the user types into the tuesdayAlarmSong jFormattedTextField, the tuesdayAlarmUpdateButton is
     * enabled to allow changes to be saved.
     * @param evt The ActionEvent
     */
    private void tuesdayAlarmSongKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tuesdayAlarmSongKeyTyped
        tuesdayAlarmUpdateButton.setEnabled(true);
    }//GEN-LAST:event_tuesdayAlarmSongKeyTyped

    /**
     * When the user types into the tuesdayAlarmTime jFormattedTextField, the tuesdayAlarmUpdateButton is
     * enabled to allow changes to be saved.
     * @param evt The ActionEvent
     */
    private void tuesdayAlarmTimeKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tuesdayAlarmTimeKeyTyped
        tuesdayAlarmUpdateButton.setEnabled(true);
    }//GEN-LAST:event_tuesdayAlarmTimeKeyTyped

    /**
     * When the tuesdayAlarmToggleButton is pressed, Tuesday's alarm is either enabled or disabled.
     * @param evt The ActionEvent
     */
    private void tuesdayAlarmToggleButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_tuesdayAlarmToggleButtonItemStateChanged
        if (!loadingSettings) {
            if (evt.getStateChange()==ItemEvent.DESELECTED) {
                printStream.println("TURN TUESDAY ALARM OFF");
            } else if (evt.getStateChange()==ItemEvent.SELECTED) {
                printStream.println("TURN TUESDAY ALARM ON");
            }
        }
    }//GEN-LAST:event_tuesdayAlarmToggleButtonItemStateChanged

    /**
     * When the playWednesdaySongButton is pressed, Wednesday's alarm song is played.
     * The button's text switches between "Play Song" and "Stop Song" appropriately.
     * @param evt The ActionEvent
     */
    private void playWednesdaySongButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playWednesdaySongButtonActionPerformed
        if (!loadingSettings) {
            if (playWednesdaySongButton.getText().equals("Play Song")) {
                printStream.println("PLAY WEDNESDAY SONG");
                playWednesdaySongButton.setText("Stop Song");
            } else {
                printStream.println("STOP SONG");
                playWednesdaySongButton.setText("Play Song");
            }
        }
    }//GEN-LAST:event_playWednesdaySongButtonActionPerformed

    /**
     * When the wednesdayAlarmUpdateButton is pressed, the changes in the jTextFields are sent over serial.
     * The button is disabled upon pressing it to prevent the method from running when no changes were made.
     * @param evt The ActionEvent
     */
    private void wednesdayAlarmUpdateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wednesdayAlarmUpdateButtonActionPerformed
        if (!loadingSettings) {
            printStream.println("SET WEDNESDAY ALARM " + wednesdayAlarmTime.getText());
            printStream.println("SET WEDNESDAY SONG " + wednesdayAlarmSong.getText());
            wednesdayAlarmUpdateButton.setEnabled(false);
        }
    }//GEN-LAST:event_wednesdayAlarmUpdateButtonActionPerformed

    /**
     * When the user types into the wednesdayAlarmSong jFormattedTextField, the wednesdayAlarmUpdateButton is
     * enabled to allow changes to be saved.
     * @param evt The ActionEvent
     */
    private void wednesdayAlarmSongKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_wednesdayAlarmSongKeyTyped
        wednesdayAlarmUpdateButton.setEnabled(true);
    }//GEN-LAST:event_wednesdayAlarmSongKeyTyped

    /**
     * When the user types into the wednesdayAlarmTime jFormattedTextField, the wednesdayAlarmUpdateButton is
     * enabled to allow changes to be saved.
     * @param evt The ActionEvent
     */
    private void wednesdayAlarmTimeKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_wednesdayAlarmTimeKeyTyped
        wednesdayAlarmUpdateButton.setEnabled(true);
    }//GEN-LAST:event_wednesdayAlarmTimeKeyTyped

    /**
     * When the wednesdayAlarmToggleButton is pressed, Wednesday's alarm is either enabled or disabled.
     * @param evt The ActionEvent
     */
    private void wednesdayAlarmToggleButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_wednesdayAlarmToggleButtonItemStateChanged
        if (!loadingSettings) {
            if (evt.getStateChange()==ItemEvent.DESELECTED) {
                printStream.println("TURN WEDNESDAY ALARM OFF");
            } else if (evt.getStateChange()==ItemEvent.SELECTED) {
                printStream.println("TURN WEDNESDAY ALARM ON");
            }
        }
    }//GEN-LAST:event_wednesdayAlarmToggleButtonItemStateChanged

    /**
     * When the thursdaySongButton is pressed, Thursday's alarm song is played.
     * The button's text switches between "Play Song" and "Stop Song" appropriately.
     * @param evt The ActionEvent
     */
    private void playThursdaySongButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playThursdaySongButtonActionPerformed
        if (!loadingSettings) {
            if (playThursdaySongButton.getText().equals("Play Song")) {
                printStream.println("PLAY THURSDAY SONG");
                playThursdaySongButton.setText("Stop Song");
            } else {
                printStream.println("STOP SONG");
                playThursdaySongButton.setText("Play Song");
            }
        }
    }//GEN-LAST:event_playThursdaySongButtonActionPerformed

    /**
     * When the thursdayAlarmUpdateButton is pressed, the changes in the jTextFields are sent over serial.
     * The button is disabled upon pressing it to prevent the method from running when no changes were made.
     * @param evt The ActionEvent
     */
    private void thursdayAlarmUpdateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_thursdayAlarmUpdateButtonActionPerformed
        if (!loadingSettings) {
            printStream.println("SET THURSDAY ALARM " + thursdayAlarmTime.getText());
            printStream.println("SET THURSDAY SONG " + thursdayAlarmSong.getText());
            thursdayAlarmUpdateButton.setEnabled(false);
        }
    }//GEN-LAST:event_thursdayAlarmUpdateButtonActionPerformed

    /**
     * When the user types into the thursdayAlarmSong jFormattedTextField, the thursdayAlarmUpdateButton is
     * enabled to allow changes to be saved.
     * @param evt The ActionEvent
     */
    private void thursdayAlarmSongKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_thursdayAlarmSongKeyTyped
        thursdayAlarmUpdateButton.setEnabled(true);
    }//GEN-LAST:event_thursdayAlarmSongKeyTyped

    /**
     * When the user types into the thursdayAlarmTime jFormattedTextField, the thursdayAlarmUpdateButton is
     * enabled to allow changes to be saved.
     * @param evt The ActionEvent
     */
    private void thursdayAlarmTimeKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_thursdayAlarmTimeKeyTyped
        thursdayAlarmUpdateButton.setEnabled(true);
    }//GEN-LAST:event_thursdayAlarmTimeKeyTyped

    /**
     * When the thursdayAlarmToggleButton is pressed, Thursday's alarm is either enabled or disabled.
     * @param evt The ActionEvent
     */
    private void thursdayAlarmToggleButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_thursdayAlarmToggleButtonItemStateChanged
        if (!loadingSettings) {
            if (evt.getStateChange()==ItemEvent.DESELECTED) {
                printStream.println("TURN THURSDAY ALARM OFF");
            } else if (evt.getStateChange()==ItemEvent.SELECTED) {
                printStream.println("TURN THURSDAY ALARM ON");
            }
        }
    }//GEN-LAST:event_thursdayAlarmToggleButtonItemStateChanged

    /**
     * When the fridaySongButton is pressed, Friday's alarm song is played.
     * The button's text switches between "Play Song" and "Stop Song" appropriately.
     * @param evt The ActionEvent
     */
    private void playFridaySongButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playFridaySongButtonActionPerformed
        if (!loadingSettings) {
            if (playFridaySongButton.getText().equals("Play Song")) {
                printStream.println("PLAY FRIDAY SONG");
                playFridaySongButton.setText("Stop Song");
            } else {
                printStream.println("STOP SONG");
                playFridaySongButton.setText("Play Song");
            }
        }
    }//GEN-LAST:event_playFridaySongButtonActionPerformed

    /**
     * When the fridayAlarmUpdateButton is pressed, the changes in the jTextFields are sent over serial.
     * The button is disabled upon pressing it to prevent the method from running when no changes were made.
     * @param evt The ActionEvent
     */
    private void fridayAlarmUpdateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fridayAlarmUpdateButtonActionPerformed
        if (!loadingSettings) {
            printStream.println("SET FRIDAY ALARM " + fridayAlarmTime.getText());
            printStream.println("SET FRIDAY SONG " + fridayAlarmSong.getText());
            fridayAlarmUpdateButton.setEnabled(false);
        }
    }//GEN-LAST:event_fridayAlarmUpdateButtonActionPerformed

    /**
     * When the user types into the fridayAlarmSong jFormattedTextField, the fridayAlarmUpdateButton is
     * enabled to allow changes to be saved.
     * @param evt The ActionEvent
     */
    private void fridayAlarmSongKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fridayAlarmSongKeyTyped
        fridayAlarmUpdateButton.setEnabled(true);
    }//GEN-LAST:event_fridayAlarmSongKeyTyped

    /**
     * When the user types into the fridayAlarmTime jFormattedTextField, the fridayAlarmUpdateButton is
     * enabled to allow changes to be saved.
     * @param evt The ActionEvent
     */
    private void fridayAlarmTimeKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fridayAlarmTimeKeyTyped
        fridayAlarmUpdateButton.setEnabled(true);
    }//GEN-LAST:event_fridayAlarmTimeKeyTyped

    /**
     * When the fridayAlarmToggleButton is pressed, Friday's alarm is either enabled or disabled.
     * @param evt The ActionEvent
     */
    private void fridayAlarmToggleButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_fridayAlarmToggleButtonItemStateChanged
        if (!loadingSettings) {
            if (evt.getStateChange()==ItemEvent.DESELECTED) {
                printStream.println("TURN FRIDAY ALARM OFF");
            } else if (evt.getStateChange()==ItemEvent.SELECTED) {
                printStream.println("TURN FRIDAY ALARM ON");
            }
        }
    }//GEN-LAST:event_fridayAlarmToggleButtonItemStateChanged

    /**
     * When the saturdayAlarmToggleButton is pressed, Saturday's alarm is either enabled or disabled.
     * @param evt The ActionEvent
     */
    private void saturdayAlarmToggleButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_saturdayAlarmToggleButtonItemStateChanged
        if (!loadingSettings) {
            if (evt.getStateChange()==ItemEvent.DESELECTED) {
                printStream.println("TURN SATURDAY ALARM OFF");
            } else if (evt.getStateChange()==ItemEvent.SELECTED) {
                printStream.println("TURN SATURDAY ALARM ON");
            }
        }
    }//GEN-LAST:event_saturdayAlarmToggleButtonItemStateChanged

    /**
     * When the user types into the saturdayAlarmTime jFormattedTextField, the saturdayAlarmUpdateButton is
     * enabled to allow changes to be saved.
     * @param evt The ActionEvent
     */
    private void saturdayAlarmTimeKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_saturdayAlarmTimeKeyTyped
        saturdayAlarmUpdateButton.setEnabled(true);
    }//GEN-LAST:event_saturdayAlarmTimeKeyTyped

    /**
     * When the user types into the saturdayAlarmSong jFormattedTextField, the saturdayAlarmUpdateButton is
     * enabled to allow changes to be saved.
     * @param evt The ActionEvent
     */
    private void saturdayAlarmSongKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_saturdayAlarmSongKeyTyped
        saturdayAlarmUpdateButton.setEnabled(true);
    }//GEN-LAST:event_saturdayAlarmSongKeyTyped

    /**
     * When the saturdayAlarmUpdateButton is pressed, the changes in the jTextFields are sent over serial.
     * The button is disabled upon pressing it to prevent the method from running when no changes were made.
     * @param evt The ActionEvent
     */
    private void saturdayAlarmUpdateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saturdayAlarmUpdateButtonActionPerformed
        if (!loadingSettings) {
            printStream.println("SET SATURDAY ALARM " + saturdayAlarmTime.getText());
            printStream.println("SET SATURDAY SONG " + saturdayAlarmSong.getText());
            saturdayAlarmUpdateButton.setEnabled(false);
        }
    }//GEN-LAST:event_saturdayAlarmUpdateButtonActionPerformed

    /**
     * When the saturdaySongButton is pressed, Saturday's alarm song is played.
     * The button's text switches between "Play Song" and "Stop Song" appropriately.
     * @param evt The ActionEvent
     */
    private void playSaturdaySongButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playSaturdaySongButtonActionPerformed
        if (!loadingSettings) {
            if (playSaturdaySongButton.getText().equals("Play Song")) {
                printStream.println("PLAY SATURDAY SONG");
                playSaturdaySongButton.setText("Stop Song");
            } else {
                printStream.println("STOP SONG");
                playSaturdaySongButton.setText("Play Song");
            }
        }
    }//GEN-LAST:event_playSaturdaySongButtonActionPerformed

    /**
     * When the printCurrentDataButton is pressed, the latest data is requested over serial
     * @param evt The ActionEvent
     */
    private void printCurrentDataButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printCurrentDataButtonActionPerformed
        if (!loadingSettings) {
            printStream.println("PRINT CURRENT DATA");
        }
    }//GEN-LAST:event_printCurrentDataButtonActionPerformed

    /**
     * When the synchronizeTimeButton is pressed, the current date and time is taken from Java and sent over serial
     * @param evt The ActionEvent
     */
    private void synchronizeTimeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_synchronizeTimeButtonActionPerformed
        Calendar rightNow = Calendar.getInstance();
        printStream.print("SET TIME ");
        printStream.print(rightNow.get(Calendar.YEAR));
        printStream.print('!');
        printStream.print(rightNow.get(Calendar.MONTH)+1);
        printStream.print('@');
        printStream.print(rightNow.get(Calendar.DAY_OF_MONTH));
        printStream.print('#');
        printStream.print(rightNow.get(Calendar.HOUR_OF_DAY));
        printStream.print('$');
        printStream.print(rightNow.get(Calendar.MINUTE));
        printStream.print('%');
        printStream.println(rightNow.get(Calendar.SECOND));
    }//GEN-LAST:event_synchronizeTimeButtonActionPerformed
    
    SerialPort serialPort;
    /** The port we're normally going to use. */
    private static final String PORT_NAMES[] = { 
        "/dev/tty.usbmodem1421", // Mac OS X
        "/dev/tty.usbmodem14241", // Mac OS X
        "/dev/tty.AdafruitEZ-Link1544-SPP", // Mac OS X
        "/dev/ttyACM0", // Raspberry Pi
        "/dev/ttyUSB0", // Linux
        "COM18", // Windows
    };
    /**
    * A BufferedReader which will be fed by a InputStreamReader 
    * converting the bytes into characters 
    * making the displayed results codepage independent
    */
    private BufferedReader input;
    /** The output stream to the port */
    private OutputStream output;
    /** Milliseconds to block while waiting for port open */
    private static final int TIME_OUT = 2000;
    /** Default bits per second for COM port. */
    private static final int DATA_RATE = 9600;
    
    /** PrintStream used to send serial data to alarm clock */
    PrintStream printStream;
    /** String that stores all serial output from alarm clock */
    String text = "";
    /** Object of current class used to initialize GUI */
    static GUI gui;
    /** Boolean that states if settings are currently loading
     *  and the GUI therefore should be disabled
     */
    boolean loadingSettings = true;
    /** Boolean that states if a COM Port was found.
     *  If no COM port is found, the GUI remains disabled
     */
    boolean foundCOMPort = false;
    
    /** 
     * Method that sets up the serial port communication with the alarm clock
     */
    public void initialize() {
        // the next line is for Raspberry Pi and 
        // gets us into the while loop and was suggested here was suggested http://www.raspberrypi.org/phpBB3/viewtopic.php?f=81&t=32186
        //System.setProperty("gnu.io.rxtx.SerialPorts", "/dev/tty.usbmodem14241");

        CommPortIdentifier portId = null;
        Enumeration portEnum = CommPortIdentifier.getPortIdentifiers();

        //First, Find an instance of serial port as set in PORT_NAMES.
        while (portEnum.hasMoreElements()) {
            CommPortIdentifier currPortId = (CommPortIdentifier) portEnum.nextElement();
            System.out.println(currPortId.getName());
            for (String portName : PORT_NAMES) {
                    if (currPortId.getName().equals(portName)) {
                            portId = currPortId;
                            break;
                    }
            }
        }
        if (portId == null) {
            System.out.println("Could not find COM port.");
            return;
        }

        try {
            // open serial port, and use class name for the appName.
            serialPort = (SerialPort) portId.open(this.getClass().getName(),
                            TIME_OUT);

            // set port parameters
            serialPort.setSerialPortParams(DATA_RATE,
                            SerialPort.DATABITS_8,
                            SerialPort.STOPBITS_1,
                            SerialPort.PARITY_NONE);

            // open the streams
            input = new BufferedReader(new InputStreamReader(serialPort.getInputStream()));
            output = serialPort.getOutputStream();

            printStream = new PrintStream(output);

            // add event listeners
            serialPort.addEventListener(this);
            serialPort.notifyOnDataAvailable(true);

            foundCOMPort = true;
        } catch (PortInUseException | UnsupportedCommOperationException | IOException | TooManyListenersException e) {
            System.err.println(e.toString());
        }
    }

    /**
     * This should be called when you stop using the port.
     * This will prevent port locking on platforms like Linux.
     */
    public synchronized void close() {
        if (serialPort != null) {
            serialPort.removeEventListener();
            serialPort.close();
        }
    }

    /**
     * Handle an event on the serial port. Read the data and print it.
     */
    public synchronized void serialEvent(SerialPortEvent oEvent) {
            if (oEvent.getEventType() == SerialPortEvent.DATA_AVAILABLE) {
                    try {
                        String inputLine=input.readLine();
                        System.out.println(inputLine);
                        text += inputLine + "\n";   
                    } catch (IOException e) {
                            System.err.println(e.toString());
                    }
            }
            // Ignore all the other eventTypes, but you should consider the other ones.
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        gui = new GUI();
        gui.initialize();
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(gui);
    }
    
    /**
     * Method to show GUI and start worker thread
     */
    public void run() {
        gui.setVisible(true);
        new Thread(workRunner).start();
        Runtime.getRuntime().addShutdownHook(new Thread() {
            public void run() {
                printStream.println("EXIT");
            }
        });
    }
    
    /**
     * Thread that sets up the GUI and constantly updates the serial jTextArea
     */
    Runnable workRunner = new Runnable() {
        public void run() {
            try {
                toggleAllComponents(false);
                Thread.sleep(1000);
                if (foundCOMPort) {
                    loadSettings();
                    
                    while(true) {
                        try {
                            if (!serialTextArea.getDocument().getText(0, serialTextArea.getDocument().getLength()).equals(text)) {
                                serialTextArea.setText(text);
                                serialTextArea.setCaretPosition(serialTextArea.getDocument().getLength());
                            }
                        } catch (BadLocationException ex) {
                            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        Thread.sleep(500);
                    }
                } else {
                    
                }
            } catch (InterruptedException ex) {
                Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    };
    
    /**
     * Method that changes the enabled status of all components in GUI
     * @param enabled When set to false, GUI is disabled. When set to true, GUI is enabled.
     */
    private void toggleAllComponents(boolean enabled) {
        brightnessLabel.setEnabled(enabled);
        brightnessSlider.setEnabled(enabled);
        celsiusRadioButton.setEnabled(enabled);
        displayLabel.setEnabled(enabled);
        displayTypeComboBox.setEnabled(enabled);
        fahrenheitRadioButton.setEnabled(enabled);
        fridayAlarmLabel.setEnabled(enabled);
        fridayAlarmToggleButton.setEnabled(enabled);
        fridayAlarmTime.setEnabled(enabled);
        fridayAlarmSong.setEnabled(enabled);
        fridayTrackLabel1.setEnabled(enabled);
        fridayTrackLabel2.setEnabled(enabled);
        fridayAlarmUpdateButton.setEnabled(false);
        hourFormat12RadioButton.setEnabled(enabled);
        hourFormat24RadioButton.setEnabled(enabled);
        mondayAlarmLabel.setEnabled(enabled);
        mondayAlarmToggleButton.setEnabled(enabled);
        mondayAlarmTime.setEnabled(enabled);
        mondayAlarmSong.setEnabled(enabled);
        mondayTrackLabel1.setEnabled(enabled);
        mondayTrackLabel2.setEnabled(enabled);
        mondayAlarmUpdateButton.setEnabled(false);
        playSongButton.setEnabled(enabled);
        playSongLabel1.setEnabled(enabled);
        playSongLabel2.setEnabled(enabled);
        playSongNumber.setEnabled(enabled);
        playMondaySongButton.setEnabled(enabled);
        playFridaySongButton.setEnabled(enabled);
        playSaturdaySongButton.setEnabled(enabled);
        playSundaySongButton.setEnabled(enabled);
        playTuesdaySongButton.setEnabled(enabled);
        playThursdaySongButton.setEnabled(enabled);
        playWednesdaySongButton.setEnabled(enabled);
        printTrackListButton.setEnabled(enabled);
        printCurrentDataButton.setEnabled(enabled);
        serialSendButton.setEnabled(enabled);
        serialTextArea.setEnabled(enabled);
        serialTextField.setEnabled(enabled);
        saturdayAlarmLabel.setEnabled(enabled);
        saturdayAlarmToggleButton.setEnabled(enabled);
        saturdayAlarmTime.setEnabled(enabled);
        saturdayAlarmSong.setEnabled(enabled);
        saturdayTrackLabel1.setEnabled(enabled);
        saturdayTrackLabel2.setEnabled(enabled);
        saturdayAlarmUpdateButton.setEnabled(false);
        sundayAlarmLabel.setEnabled(enabled);
        sundayAlarmToggleButton.setEnabled(enabled);
        sundayAlarmTime.setEnabled(enabled);
        sundayAlarmSong.setEnabled(enabled);
        sundayTrackLabel1.setEnabled(enabled);
        sundayTrackLabel2.setEnabled(enabled);
        sundayAlarmUpdateButton.setEnabled(false);
        synchronizeTimeButton.setEnabled(enabled);
        tuesdayAlarmLabel.setEnabled(enabled);
        tuesdayAlarmToggleButton.setEnabled(enabled);
        tuesdayAlarmTime.setEnabled(enabled);
        tuesdayAlarmSong.setEnabled(enabled);
        tuesdayTrackLabel1.setEnabled(enabled);
        tuesdayTrackLabel2.setEnabled(enabled);
        tuesdayAlarmUpdateButton.setEnabled(false);
        thursdayAlarmLabel.setEnabled(enabled);
        thursdayAlarmToggleButton.setEnabled(enabled);
        thursdayAlarmTime.setEnabled(enabled);
        thursdayAlarmSong.setEnabled(enabled);
        thursdayTrackLabel1.setEnabled(enabled);
        thursdayTrackLabel2.setEnabled(enabled);
        thursdayAlarmUpdateButton.setEnabled(false);
        wednesdayAlarmLabel.setEnabled(enabled);
        wednesdayAlarmToggleButton.setEnabled(enabled);
        wednesdayAlarmTime.setEnabled(enabled);
        wednesdayAlarmSong.setEnabled(enabled);
        wednesdayTrackLabel1.setEnabled(enabled);
        wednesdayTrackLabel2.setEnabled(enabled);
        wednesdayAlarmUpdateButton.setEnabled(false);
    }
    
    /**
     * Method that interprets latest serial data to display correct settings in the GUI.
     */
    private void loadSettings() {
        printStream.println("P");
        
        long PERIOD = 1000L;
        long lastTime = System.currentTimeMillis();
        long thisTime = System.currentTimeMillis();
        
        while ((thisTime - lastTime) <= PERIOD) {
            try {
                if (!serialTextArea.getDocument().getText(0, serialTextArea.getDocument().getLength()).equals(text)) {
                    serialTextArea.setText(text);
                    serialTextArea.setCaretPosition(serialTextArea.getDocument().getLength());
                }
            } catch (BadLocationException ex) {
                Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
            }
            thisTime = System.currentTimeMillis();
        }
        
        loadingSettings = true;
        
        printStream.println("VIEW SETTINGS");
        
        lastTime = System.currentTimeMillis();
        while ((thisTime - lastTime) <= PERIOD) { 
            try {
                if (!serialTextArea.getDocument().getText(0, serialTextArea.getDocument().getLength()).equals(text)) {
                    serialTextArea.setText(text);
                    serialTextArea.setCaretPosition(serialTextArea.getDocument().getLength());
                }
            } catch (BadLocationException ex) {
                Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
            }
            thisTime = System.currentTimeMillis();
        }
        
        serialTextArea.setCaretPosition(serialTextArea.getDocument().getLength());
        
        int lastSettingsIndex = text.lastIndexOf("VIEW SETTINGS");
        
        if (text.indexOf("Display: Temp", lastSettingsIndex) != -1) {
            displayTypeComboBox.setSelectedItem("Temp");
        } else if (text.indexOf("Display: Date", lastSettingsIndex) != -1) {
            displayTypeComboBox.setSelectedItem("Date");
        } else if (text.indexOf("Display: None", lastSettingsIndex) != -1) {
            displayTypeComboBox.setSelectedItem("None");
        }

        if (text.indexOf("Fahrenheit", lastSettingsIndex) != -1) {
            fahrenheitRadioButton.setSelected(true);
        } else if (text.indexOf("Celsius", lastSettingsIndex) != -1) {
            celsiusRadioButton.setSelected(true);
        }

        if (text.indexOf("12-Hour Format", lastSettingsIndex) != -1) {
            hourFormat12RadioButton.setSelected(true);
        } else if (text.indexOf("24-Hour Format", lastSettingsIndex) != -1) {
            hourFormat24RadioButton.setSelected(true);
        }

        if (text.indexOf("Brightness", lastSettingsIndex) != -1) {
            String temp = text.substring(text.indexOf(" ", text.indexOf("Brightness", lastSettingsIndex)) + 1, text.indexOf("\n", text.indexOf("Brightness", lastSettingsIndex)));
            int brightness = Integer.parseInt(temp);
            brightnessSlider.setValue(brightness);
        }
        
        DateFormat formatter = new SimpleDateFormat("HH:mm");
        
        if (text.indexOf("Sunday Alarm: ON", lastSettingsIndex) != -1) {
            sundayAlarmToggleButton.setSelected(true);
            String sundayTime = text.substring(text.indexOf("Sunday Alarm: ON", lastSettingsIndex) + 17, text.indexOf("track", text.lastIndexOf("Sunday Alarm:")));
            try {
              Date dt = formatter.parse(sundayTime);
              Calendar cal = Calendar.getInstance();
              cal.setTime(dt);
              sundayAlarmTime.setValue(dt);
            } catch (ParseException e) {
              // This can happen if you are trying to parse an invalid date, e.g., 25:19.
              // Here, you should log the error and decide what to do next
              e.printStackTrace();
            }
        } else { 
            sundayAlarmToggleButton.setSelected(false);
            String sundayTime = text.substring(text.indexOf("Sunday Alarm: OFF", lastSettingsIndex) + 18, text.indexOf("track", text.lastIndexOf("Sunday Alarm:")));
            try {
              Date dt = formatter.parse(sundayTime);
              Calendar cal = Calendar.getInstance();
              cal.setTime(dt);
              sundayAlarmTime.setValue(dt);
            } catch (ParseException e) {
              // This can happen if you are trying to parse an invalid date, e.g., 25:19.
              // Here, you should log the error and decide what to do next
              e.printStackTrace();
            }
        }
        
        String sundaySongString = text.substring(text.indexOf("k", text.indexOf("Sunday Alarm:", lastSettingsIndex)) + 1, text.indexOf(".", text.indexOf("Sunday Alarm:", lastSettingsIndex)));
        sundayAlarmSong.setText(sundaySongString);
        
        if (text.indexOf("Monday Alarm: ON", lastSettingsIndex) != -1) {
            mondayAlarmToggleButton.setSelected(true);
            String mondayTime = text.substring(text.indexOf("Monday Alarm: ON", lastSettingsIndex) + 17, text.indexOf("track", text.lastIndexOf("Monday Alarm:")));
            try {
              Date dt = formatter.parse(mondayTime);
              Calendar cal = Calendar.getInstance();
              cal.setTime(dt);
              mondayAlarmTime.setValue(dt);
            } catch (ParseException e) {
              // This can happen if you are trying to parse an invalid date, e.g., 25:19.
              // Here, you should log the error and decide what to do next
              e.printStackTrace();
            }
        } else { 
            mondayAlarmToggleButton.setSelected(false);
            String mondayTime = text.substring(text.indexOf("Monday Alarm: OFF", lastSettingsIndex) + 18, text.indexOf("track", text.lastIndexOf("Monday Alarm:")));
            try {
              Date dt = formatter.parse(mondayTime);
              Calendar cal = Calendar.getInstance();
              cal.setTime(dt);
              mondayAlarmTime.setValue(dt);
            } catch (ParseException e) {
              // This can happen if you are trying to parse an invalid date, e.g., 25:19.
              // Here, you should log the error and decide what to do next
              e.printStackTrace();
            }
        }
        
        String mondaySongString = text.substring(text.indexOf("k", text.indexOf("Monday Alarm:", lastSettingsIndex)) + 1, text.indexOf(".", text.indexOf("Monday Alarm:", lastSettingsIndex)));
        mondayAlarmSong.setText(mondaySongString);
        
        if (text.indexOf("Tuesday Alarm: ON", lastSettingsIndex) != -1) {
            tuesdayAlarmToggleButton.setSelected(true);
            String tuesdayTime = text.substring(text.indexOf("Tuesday Alarm: ON", lastSettingsIndex) + 18, text.indexOf("track", text.lastIndexOf("Tuesday Alarm:")));
            try {
              Date dt = formatter.parse(tuesdayTime);
              Calendar cal = Calendar.getInstance();
              cal.setTime(dt);
              tuesdayAlarmTime.setValue(dt);
            } catch (ParseException e) {
              // This can happen if you are trying to parse an invalid date, e.g., 25:19.
              // Here, you should log the error and decide what to do next
              e.printStackTrace();
            }
        } else { 
            tuesdayAlarmToggleButton.setSelected(false);
            String tuesdayTime = text.substring(text.indexOf("Tuesday Alarm: OFF", lastSettingsIndex) + 19, text.indexOf("track", text.lastIndexOf("Tuesday Alarm:")));
            try {
              Date dt = formatter.parse(tuesdayTime);
              Calendar cal = Calendar.getInstance();
              cal.setTime(dt);
              tuesdayAlarmTime.setValue(dt);
            } catch (ParseException e) {
              // This can happen if you are trying to parse an invalid date, e.g., 25:19.
              // Here, you should log the error and decide what to do next
              e.printStackTrace();
            }
        }
        
        String tuesdaySongString = text.substring(text.indexOf("k", text.indexOf("Tuesday Alarm:", lastSettingsIndex)) + 1, text.indexOf(".", text.indexOf("Tuesday Alarm:", lastSettingsIndex)));
        tuesdayAlarmSong.setText(tuesdaySongString);
        
        if (text.indexOf("Wednesday Alarm: ON", lastSettingsIndex) != -1) {
            wednesdayAlarmToggleButton.setSelected(true);
            String wednesdayTime = text.substring(text.indexOf("Wednesday Alarm: ON", lastSettingsIndex) + 20, text.indexOf("track", text.lastIndexOf("Wednesday Alarm:")));
            try {
              Date dt = formatter.parse(wednesdayTime);
              Calendar cal = Calendar.getInstance();
              cal.setTime(dt);
              wednesdayAlarmTime.setValue(dt);
            } catch (ParseException e) {
              // This can happen if you are trying to parse an invalid date, e.g., 25:19.
              // Here, you should log the error and decide what to do next
              e.printStackTrace();
            }
        } else { 
            wednesdayAlarmToggleButton.setSelected(false);
            String wednesdayTime = text.substring(text.indexOf("Wednesday Alarm: OFF", lastSettingsIndex) + 21, text.indexOf("track", text.lastIndexOf("Wednesday Alarm:")));
            try {
              Date dt = formatter.parse(wednesdayTime);
              Calendar cal = Calendar.getInstance();
              cal.setTime(dt);
              wednesdayAlarmTime.setValue(dt);
            } catch (ParseException e) {
              // This can happen if you are trying to parse an invalid date, e.g., 25:19.
              // Here, you should log the error and decide what to do next
              e.printStackTrace();
            }
        }
        
        String wednesdaySongString = text.substring(text.indexOf("k", text.indexOf("Wednesday Alarm:", lastSettingsIndex)) + 1, text.indexOf(".", text.indexOf("Wednesday Alarm:", lastSettingsIndex)));
        wednesdayAlarmSong.setText(wednesdaySongString);
        
        if (text.indexOf("Thursday Alarm: ON", lastSettingsIndex) != -1) {
            thursdayAlarmToggleButton.setSelected(true);
            String thursdayTime = text.substring(text.indexOf("Thursday Alarm: ON", lastSettingsIndex) + 19, text.indexOf("track", text.lastIndexOf("Thursday Alarm:")));
            try {
              Date dt = formatter.parse(thursdayTime);
              Calendar cal = Calendar.getInstance();
              cal.setTime(dt);
              thursdayAlarmTime.setValue(dt);
            } catch (ParseException e) {
              // This can happen if you are trying to parse an invalid date, e.g., 25:19.
              // Here, you should log the error and decide what to do next
              e.printStackTrace();
            }
        } else { 
            thursdayAlarmToggleButton.setSelected(false);
            String thursdayTime = text.substring(text.indexOf("Thursday Alarm: OFF", lastSettingsIndex) + 20, text.indexOf("track", text.lastIndexOf("Thursday Alarm:")));
            try {
              Date dt = formatter.parse(thursdayTime);
              Calendar cal = Calendar.getInstance();
              cal.setTime(dt);
              thursdayAlarmTime.setValue(dt);
            } catch (ParseException e) {
              // This can happen if you are trying to parse an invalid date, e.g., 25:19.
              // Here, you should log the error and decide what to do next
              e.printStackTrace();
            }
        }
        
        String thursdaySongString = text.substring(text.indexOf("k", text.indexOf("Thursday Alarm:", lastSettingsIndex)) + 1, text.indexOf(".", text.indexOf("Thursday Alarm:", lastSettingsIndex)));
        thursdayAlarmSong.setText(thursdaySongString);
        
        if (text.indexOf("Friday Alarm: ON", lastSettingsIndex) != -1) {
            fridayAlarmToggleButton.setSelected(true);
            String fridayTime = text.substring(text.indexOf("Friday Alarm: ON", lastSettingsIndex) + 17, text.indexOf("track", text.lastIndexOf("Friday Alarm:")));
            try {
              Date dt = formatter.parse(fridayTime);
              Calendar cal = Calendar.getInstance();
              cal.setTime(dt);
              fridayAlarmTime.setValue(dt);
            } catch (ParseException e) {
              // This can happen if you are trying to parse an invalid date, e.g., 25:19.
              // Here, you should log the error and decide what to do next
              e.printStackTrace();
            }
        } else { 
            fridayAlarmToggleButton.setSelected(false);
            String fridayTime = text.substring(text.indexOf("Friday Alarm: OFF", lastSettingsIndex) + 18, text.indexOf("track", text.lastIndexOf("Friday Alarm:")));
            try {
              Date dt = formatter.parse(fridayTime);
              Calendar cal = Calendar.getInstance();
              cal.setTime(dt);
              fridayAlarmTime.setValue(dt);
            } catch (ParseException e) {
              // This can happen if you are trying to parse an invalid date, e.g., 25:19.
              // Here, you should log the error and decide what to do next
              e.printStackTrace();
            }
        }
        
        String fridaySongString = text.substring(text.indexOf("k", text.indexOf("Friday Alarm:", lastSettingsIndex)) + 1, text.indexOf(".", text.indexOf("Friday Alarm:", lastSettingsIndex)));
        fridayAlarmSong.setText(fridaySongString);
        
        if (text.indexOf("Saturday Alarm: ON", lastSettingsIndex) != -1) {
            saturdayAlarmToggleButton.setSelected(true);
            String saturdayTime = text.substring(text.indexOf("Saturday Alarm: ON", lastSettingsIndex) + 19, text.indexOf("track", text.lastIndexOf("Saturday Alarm:")));
            try {
              Date dt = formatter.parse(saturdayTime);
              Calendar cal = Calendar.getInstance();
              cal.setTime(dt);
              saturdayAlarmTime.setValue(dt);
            } catch (ParseException e) {
              // This can happen if you are trying to parse an invalid date, e.g., 25:19.
              // Here, you should log the error and decide what to do next
              e.printStackTrace();
            }
        } else { 
            saturdayAlarmToggleButton.setSelected(false);
            String saturdayTime = text.substring(text.indexOf("Saturday Alarm: OFF", lastSettingsIndex) + 20, text.indexOf("track", text.lastIndexOf("Saturday Alarm:")));
            try {
              Date dt = formatter.parse(saturdayTime);
              Calendar cal = Calendar.getInstance();
              cal.setTime(dt);
              saturdayAlarmTime.setValue(dt);
            } catch (ParseException e) {
              // This can happen if you are trying to parse an invalid date, e.g., 25:19.
              // Here, you should log the error and decide what to do next
              e.printStackTrace();
            }
        }
        
        String saturdaySongString = text.substring(text.indexOf("k", text.indexOf("Saturday Alarm:", lastSettingsIndex)) + 1, text.indexOf(".", text.indexOf("Saturday Alarm:", lastSettingsIndex)));
        saturdayAlarmSong.setText(saturdaySongString);
        
        loadingSettings = false;
        toggleAllComponents(true);
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel brightnessLabel;
    private javax.swing.JSlider brightnessSlider;
    private javax.swing.JRadioButton celsiusRadioButton;
    private javax.swing.JLabel displayLabel;
    private javax.swing.JComboBox displayTypeComboBox;
    private javax.swing.JRadioButton fahrenheitRadioButton;
    private javax.swing.JLabel fridayAlarmLabel;
    private javax.swing.JFormattedTextField fridayAlarmSong;
    private javax.swing.JFormattedTextField fridayAlarmTime;
    private javax.swing.JToggleButton fridayAlarmToggleButton;
    private javax.swing.JButton fridayAlarmUpdateButton;
    private javax.swing.JLabel fridayTrackLabel1;
    private javax.swing.JLabel fridayTrackLabel2;
    private javax.swing.JRadioButton hourFormat12RadioButton;
    private javax.swing.JRadioButton hourFormat24RadioButton;
    private javax.swing.ButtonGroup hourFormatButtonGroup;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel mondayAlarmLabel;
    private javax.swing.JFormattedTextField mondayAlarmSong;
    private javax.swing.JFormattedTextField mondayAlarmTime;
    private javax.swing.JToggleButton mondayAlarmToggleButton;
    private javax.swing.JButton mondayAlarmUpdateButton;
    private javax.swing.JLabel mondayTrackLabel1;
    private javax.swing.JLabel mondayTrackLabel2;
    private javax.swing.JButton playFridaySongButton;
    private javax.swing.JButton playMondaySongButton;
    private javax.swing.JButton playSaturdaySongButton;
    private javax.swing.JButton playSongButton;
    private javax.swing.JLabel playSongLabel1;
    private javax.swing.JLabel playSongLabel2;
    private javax.swing.JFormattedTextField playSongNumber;
    private javax.swing.JButton playSundaySongButton;
    private javax.swing.JButton playThursdaySongButton;
    private javax.swing.JButton playTuesdaySongButton;
    private javax.swing.JButton playWednesdaySongButton;
    private javax.swing.JButton printCurrentDataButton;
    private javax.swing.JButton printTrackListButton;
    private javax.swing.JToggleButton programmingModeToggleButton;
    private javax.swing.JLabel saturdayAlarmLabel;
    private javax.swing.JFormattedTextField saturdayAlarmSong;
    private javax.swing.JFormattedTextField saturdayAlarmTime;
    private javax.swing.JToggleButton saturdayAlarmToggleButton;
    private javax.swing.JButton saturdayAlarmUpdateButton;
    private javax.swing.JLabel saturdayTrackLabel1;
    private javax.swing.JLabel saturdayTrackLabel2;
    private javax.swing.JButton serialSendButton;
    private javax.swing.JTextArea serialTextArea;
    private javax.swing.JTextField serialTextField;
    private javax.swing.JLabel sundayAlarmLabel;
    private javax.swing.JFormattedTextField sundayAlarmSong;
    private javax.swing.JFormattedTextField sundayAlarmTime;
    private javax.swing.JToggleButton sundayAlarmToggleButton;
    private javax.swing.JButton sundayAlarmUpdateButton;
    private javax.swing.JLabel sundayTrackLabel1;
    private javax.swing.JLabel sundayTrackLabel2;
    private javax.swing.JButton synchronizeTimeButton;
    private javax.swing.ButtonGroup tempButtonGroup;
    private javax.swing.JLabel thursdayAlarmLabel;
    private javax.swing.JFormattedTextField thursdayAlarmSong;
    private javax.swing.JFormattedTextField thursdayAlarmTime;
    private javax.swing.JToggleButton thursdayAlarmToggleButton;
    private javax.swing.JButton thursdayAlarmUpdateButton;
    private javax.swing.JLabel thursdayTrackLabel1;
    private javax.swing.JLabel thursdayTrackLabel2;
    private javax.swing.JLabel tuesdayAlarmLabel;
    private javax.swing.JFormattedTextField tuesdayAlarmSong;
    private javax.swing.JFormattedTextField tuesdayAlarmTime;
    private javax.swing.JToggleButton tuesdayAlarmToggleButton;
    private javax.swing.JButton tuesdayAlarmUpdateButton;
    private javax.swing.JLabel tuesdayTrackLabel1;
    private javax.swing.JLabel tuesdayTrackLabel2;
    private javax.swing.JLabel wednesdayAlarmLabel;
    private javax.swing.JFormattedTextField wednesdayAlarmSong;
    private javax.swing.JFormattedTextField wednesdayAlarmTime;
    private javax.swing.JToggleButton wednesdayAlarmToggleButton;
    private javax.swing.JButton wednesdayAlarmUpdateButton;
    private javax.swing.JLabel wednesdayTrackLabel1;
    private javax.swing.JLabel wednesdayTrackLabel2;
    // End of variables declaration//GEN-END:variables
}
